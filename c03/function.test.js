const { LinkedList, kth } = require('./function')
describe('has node', () => {
  test('to be 7', () => {
    const ll = new LinkedList()
    ll.insertHead(1)
    ll.insertLast(2)
    ll.insertLast(3)
    ll.insertLast(4)
    ll.insertLast(5)
    ll.insertLast(6)
    ll.insertLast(7)
    ll.insertLast(8)
    ll.insertLast(9)
    ll.insertLast(10)
    const result = kth(3, ll)
    expect(result.data).toBe(7)
  })
})

describe('has node', () => {
  test('to be 6', () => {
    const ll = new LinkedList()
    ll.insertHead(1)
    ll.insertLast(2)
    ll.insertLast(3)
    ll.insertLast(4)
    ll.insertLast(5)
    ll.insertLast(6)
    ll.insertLast(7)
    ll.insertLast(8)
    ll.insertLast(9)
    ll.insertLast(10)
    const result = kth(4, ll)
    expect(result.data).toBe(6)
  })
})

describe('has node', () => {
  test('to be 5', () => {
    const ll = new LinkedList()
    ll.insertHead(1)
    ll.insertLast(2)
    ll.insertLast(3)
    ll.insertLast(4)
    ll.insertLast(5)
    ll.insertLast(6)
    ll.insertLast(7)
    ll.insertLast(8)
    ll.insertLast(9)
    ll.insertLast(10)
    const result = kth(5, ll)
    expect(result.data).toBe(5)
  })
})

describe('short list', () => {
  test('there are not enough nodes', () => {
    const ll = new LinkedList()
    ll.insertHead(1)
    ll.insertLast(2)
    ll.insertLast(3)
    ll.insertLast(4)
    ll.insertLast(5)
    ll.insertLast(6)
    ll.insertLast(7)
    ll.insertLast(8)
    ll.insertLast(9)
    ll.insertLast(10)
    const result = kth(10, ll)
    expect(result).toMatch(/the list is shorter than the number/)
  })
})
